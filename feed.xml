<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>PHPMemo</title>
    <link href="https://phpmemo.com/feed.xml" rel="self" />
    <link href="https://phpmemo.com" />
    <updated>2024-12-07T18:14:30+02:00</updated>
    <author>
        <name>Enxas</name>
    </author>
    <id>https://phpmemo.com</id>

    <entry>
        <title>Lesser Known Design Patterns</title>
        <author>
            <name>Enxas</name>
        </author>
        <link href="https://phpmemo.com/lesser-known-design-patterns.html"/>
        <id>https://phpmemo.com/lesser-known-design-patterns.html</id>
            <category term="PHP"/>
            <category term="Laravel"/>
            <category term="Design Patterns"/>

        <updated>2024-12-07T17:59:40+02:00</updated>
            <summary>
                <![CDATA[
                    There are numerous lesser-known patterns that can significantly enhance your system design. This blog post will delve into some of them. The Laravel Pipeline pattern&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>There are numerous lesser-known patterns that can significantly enhance your system design. This blog post will delve into some of them.</p>
<h2>Pipeline Pattern</h2>
<p>The Laravel Pipeline pattern allows for a sequence of tasks or processes to be passed through a series of filters or pipes, each with a single responsibility, enhancing flexibility, testability, and extensibility.</p>
<pre class="language-php"><code>interface PipeInterface
{
	public function handle($passable, Closure $next);
}

class VerifyUserAge implements PipeInterface
{
	public function handle($user, Closure $next)
	{
		// Skip this pipe if user is admin
		if ($user-&gt;isAdmin()) {
			return $next($user);
		}

		if ($user-&gt;age &lt; 18) {
			throw new \Exception("User is not old enough");
		}
		return $next($user);
	}
}

class ValidateUserEmail implements PipeInterface
{
	public function handle($user, Closure $next)
	{
		if (!filter_var($user-&gt;email, FILTER_VALIDATE_EMAIL)) {
			throw new \Exception("Invalid email format");
		}
		return $next($user);
	}
}

class NormalizeUserName implements PipeInterface
{
	public function handle($user, Closure $next)
	{
		$user-&gt;name = trim(ucwords(strtolower($user-&gt;name)));
		return $next($user);
	}
}

class ProcessByType implements PipeInterface
{
	public function __construct(private string $type) {}

	public function handle($data, Closure $next)
	{
		match ($this-&gt;type) {
			'premium' =&gt; $this-&gt;processPremiumUser($data),
			'standard' =&gt; $this-&gt;processStandardUser($data),
			default =&gt; null
		};

		return $next($data);
	}
}

// User registration pipeline
class UserRegistrationPipeline
{
	public function process($user)
	{
		$pipes = [
			VerifyUserAge::class,
			ValidateUserEmail::class,
			NormalizeUserName::class,
			new ProcessByType('premium'),
		];

		return app(\Illuminate\Pipeline\Pipeline::class)
			-&gt;send($user)
			-&gt;through($pipes)
			-&gt;thenReturn();
	}
}

// Usage example
class UserController
{
	protected $pipeline;

	public function __construct(UserRegistrationPipeline $pipeline)
	{
		$this-&gt;pipeline = $pipeline;
	}

	public function register(Request $request)
	{
		try {
			$user = $this-&gt;pipeline-&gt;process(new User($request-&gt;all()));
			// Save user if all pipes pass
			$user-&gt;save();
			return response()-&gt;json(['message' =&gt; 'User registered successfully']);
		} catch (\Exception $e) {
			return response()-&gt;json(['error' =&gt; $e-&gt;getMessage()], 400);
		}
	}
}</code></pre>
<h2>Tap pattern</h2>
<p>The <code>tap</code> function takes two arguments: the first is the value to be passed, and the second is a closure. This closure receives the value, performs some operations on it, and then returns it.</p>
<pre class="language-php"><code>// instead of doing this
$article = Article::findOrFail($id);
$article-&gt;incrementViews();
$article-&gt;doSomething();

return $article;


// we can keep related functionality to one block of code
return tap(Article::findOrFail($id), function (Article $article) {
	$article-&gt;incrementViews();
	$article-&gt;doSomething();
});</code></pre>
<p>The <code>update</code> method typically returns a boolean value. However, by using the <code>tap</code> function, the <code>update</code> method instead returns the User model that was tapped. This functionality of <code>tap</code> makes it simple to ensure any method on an object returns the object itself.</p>
<pre class="language-php"><code>return tap($user)-&gt;update(['email' =&gt; $email]);</code></pre>
<p><a href="https://medium.com/@tanmaymishu/the-anatomy-of-laravels-tap-function-ea239c9846ab" target="_blank" rel="noopener noreferrer">The anatomy of Laravelâ€™s tap() function</a></p>
<h2><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit;">Cache Refresh Ahead Pattern</span></h2>
<p>This pattern ensures that the cache is updated before it expires, guaranteeing that users receive fresh data at all times. If the data is frequently accessed, it will always be cached.</p>
<pre class="language-php"><code>function cacheWithRefreshAhead(string $key, int $ttl, float $refreshAheadTime, \Closure $callback): mixed
{
	$cachedData = Cache::get($key);

	if ($cachedData) {
		$expiresAt = Cache::get("$key:expires_at");

		if ($expiresAt &amp;&amp; Carbon::now()-&gt;diffInMinutes($expiresAt) &lt;= $ttl * $refreshAheadTime) {
			// dispatch a Job to update cache:
			Cache::put($key, $callback(), $ttl);
			Cache::put("$key:expires_at", Carbon::now()-&gt;addMinutes($ttl), $ttl);
		}

		return $cachedData;
	}

	// Cache miss, so cache it
	$data = $callback();
	// dispatch a Job to update cache:
	Cache::put($key, $data, $ttl);
	Cache::put("$key:expires_at", Carbon::now()-&gt;addMinutes($ttl), $ttl);

	return $data;
}

// Usage example 
$data = cacheWithRefreshAhead('some-key', 30, 5, function () {
	// Retrieve fresh data
	return ['data' =&gt; 123];
});</code></pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Troubleshooting PHP JIT: A Definitive Guide to Enabling Performance Boost When Configuration Fails</title>
        <author>
            <name>Enxas</name>
        </author>
        <link href="https://phpmemo.com/troubleshooting-php-jit-a-definitive-guide-to-enabling-performance-boost-when-configuration-fails.html"/>
        <id>https://phpmemo.com/troubleshooting-php-jit-a-definitive-guide-to-enabling-performance-boost-when-configuration-fails.html</id>
            <category term="PHP"/>
            <category term="Laravel"/>
            <category term="JIT"/>
            <category term="Docker"/>

        <updated>2024-11-30T18:18:37+02:00</updated>
            <summary>
                <![CDATA[
                    Many posts online suggest that enabling PHP JIT is as simple as adding some values to the php.ini file, but that's not exactly the case.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Many posts online suggest that enabling PHP JIT is as simple as adding some values to the <strong>php.ini</strong> file, but that's not exactly the case. Sometimes adding these configuration values doesn't seem to do anything. In this post, I'll show how to enable PHP JIT when nothing seems to work. I'll use a default Laravel Sail Docker container, but the idea is the same for any server running PHP.</p>
<p>1. Check if a PHP extension is blocking JIT from loading. Type this command in the terminal to see JIT status:</p>
<pre class="language-bash"><code>./vendor/bin/sail php -r "print_r(opcache_get_status(false)['jit']);"</code></pre>
<p class="whitespace-pre-wrap break-words">If you see this warning, then a PHP extension is blocking JIT:</p>
<blockquote>
<p>PHP Warning: JIT is incompatible with third-party extensions that override zend_execute_ex(). JIT disabled. in Unknown on line 0.</p>
</blockquote>
<p>2. Disable problematic extensions. Laravel Sail Docker file installs many extensions, so we need to identify which ones are not compatible with PHP JIT. After disabling extensions one by one, I found that <strong>php8.3-pcov</strong> and <strong>php8.3-xdebug</strong> are problematic.</p>
<p class="whitespace-pre-wrap break-words">To disable these extensions:</p>
<ul class="-mt-1 [li&gt;&amp;]:mt-2 list-disc space-y-2 pl-8">
<li class="whitespace-normal break-words">Ensure your .env file doesn't have <strong>SAIL_XDEBUG_MODE</strong> or any other environmental values that enable xDebug</li>
<li class="whitespace-normal break-words">Add these values to your php.ini:</li>
</ul>
<pre class="language-bash"><code>pcov.enabled=0
xdebug.mode=off</code></pre>
<p>Also, add these values to enable JIT:</p>
<pre class="language-bash"><code>[opcache]
zend_extension=opcache.so
opcache.enable=1
opcache.enable_cli=1
opcache.memory_consumption=128M
opcache.interned_strings_buffer=8
opcache.max_accelerated_files=4000
opcache.revalidate_freq=60
opcache.fast_shutdown=1
opcache.jit_buffer_size=100M
opcache.jit=tracing</code></pre>
<p>3. <span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Restart If you're using Laravel Sail, rebuild your image with:</span></p>
<ul class="-mt-1 [li&gt;&amp;]:mt-2 list-disc space-y-2 pl-8">
<li class="whitespace-normal break-words"><code class="bg-text-200/5 border border-0.5 border-border-300 text-danger-000 whitespace-pre-wrap rounded-[0.3rem] px-1 py-px text-[0.9rem]">sail down</code></li>
<li class="whitespace-normal break-words"><code class="bg-text-200/5 border border-0.5 border-border-300 text-danger-000 whitespace-pre-wrap rounded-[0.3rem] px-1 py-px text-[0.9rem]">sail build</code></li>
<li class="whitespace-normal break-words"><code class="bg-text-200/5 border border-0.5 border-border-300 text-danger-000 whitespace-pre-wrap rounded-[0.3rem] px-1 py-px text-[0.9rem]">sail up -d</code></li>
</ul>
<p class="whitespace-pre-wrap break-words">Execute the command again to verify if JIT is properly enabled:</p>
<pre class="language-bash"><code>./vendor/bin/sail php -r "print_r(opcache_get_status(false)['jit']);"</code></pre>
<p>And that's it. Hopefully, your PHP JIT is now enabled and working.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Setting up Laravel Dusk for Laravel Sail Project with Decoupled Vue Frontend on Windows</title>
        <author>
            <name>Enxas</name>
        </author>
        <link href="https://phpmemo.com/setting-up-laravel-dusk-for-laravel-sail-project-with-decoupled-vue-frontend-on-windows-2.html"/>
        <id>https://phpmemo.com/setting-up-laravel-dusk-for-laravel-sail-project-with-decoupled-vue-frontend-on-windows-2.html</id>
            <category term="WSL"/>
            <category term="Vue"/>
            <category term="Testing"/>
            <category term="Laravel"/>
            <category term="Dusk"/>
            <category term="Docker"/>

        <updated>2024-11-17T14:06:12+02:00</updated>
            <summary>
                <![CDATA[
                    Requirements Laravel Sail project Vue project with Vite WSL Installation Steps 1. In your docker-compose.yml file, add these ports to the "selenium" section: ports: -&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div>
<h2 class="font-600 text-xl font-bold">Requirements</h2>
<ul class="-mt-1 [li&gt;&amp;]:mt-2 list-disc space-y-2 pl-8">
<li class="whitespace-normal break-words">Laravel Sail project</li>
<li class="whitespace-normal break-words">Vue project with Vite</li>
<li class="whitespace-normal break-words">WSL</li>
</ul>
</div>
<div>
<h2 class="font-600 text-xl font-bold">Installation Steps<br><br></h2>
1. In your <code class="bg-text-200/5 border border-0.5 border-border-300 text-danger-000 whitespace-pre-wrap rounded-[0.3rem] px-1 py-px text-[0.9rem]">docker-compose.yml</code> file, add these ports to the "selenium" section:</div>
<div>
<pre class="language-yaml"><code>ports:
    - '${FORWARD_SELENIUM_PORT:-4444}:4444'
    - '${FORWARD_SELENIUM_HEADFUL_PORT:-7900}:7900'</code></pre>
</div>
<div>2. Install Dusk:</div>
<div>
<pre class="language-bash"><code>sail composer require --dev laravel/dusk</code></pre>
<p>3. Create Dusk test and update configuration:</p>
<pre class="language-bash"><code>sail artisan dusk:install</code></pre>
<p>Â 4. Create a test:</p>
<pre class="language-bash"><code>sail artisan dusk:make LoginTest</code></pre>
<p>Â 5. Add this test method to verify functionality:</p>
<pre class="language-php"><code>public function testLogin(): void
{
    $this-&gt;browse(function (Browser $browser) {
        $browser-&gt;visit('/')
            -&gt;type('name', 'Josh')
            -&gt;type('email', 'josh@example.com')
            -&gt;type('password', 'hunter2')
            -&gt;press('Login')
            -&gt;waitForText('Logged In');
    });
}</code></pre>
<h2 class="font-600 text-xl font-bold">Configuration<br><br></h2>
<p>Before running tests, ensure your Vue application running on Windows is accessible from within the Laravel Sail Docker container.<br><br></p>
</div>
<div>1. Host your Vue application with:
<pre class="language-bash"><code>npm run dev -- --host</code></pre>
<p>Â 2. Create <code class="bg-text-200/5 border border-0.5 border-border-300 text-danger-000 whitespace-pre-wrap rounded-[0.3rem] px-1 py-px text-[0.9rem]">.env.dusk</code> file in your Laravel application root with these values:</p>
<pre class="language-bash"><code>APP_URL=http://192.168.0.100:5174/
DB_DATABASE=test_db
LARAVEL_SAIL=1</code></pre>
<p>Â (Replace IP address with your hosted Vue application IP address).</p>
</div>
<div>
<h2 class="font-600 text-xl font-bold">Running Tests<br><br></h2>
<p class="whitespace-pre-wrap break-words">Basic test execution:</p>
</div>
<div>
<pre class="language-bash"><code>sail dusk --env=.env.dusk</code></pre>
</div>
<div>
<p>To view tests running visually:<br><br></p>
1. Add to <code class="bg-text-200/5 border border-0.5 border-border-300 text-danger-000 whitespace-pre-wrap rounded-[0.3rem] px-1 py-px text-[0.9rem]">.env.dusk</code>:</div>
<div>
<pre class="language-bash"><code>DUSK_HEADLESS_DISABLED=1</code></pre>
</div>
<div>2. Visit <code class="bg-text-200/5 border border-0.5 border-border-300 text-danger-000 whitespace-pre-wrap rounded-[0.3rem] px-1 py-px text-[0.9rem]">http://localhost:7900</code> (default password: 'secret')<br>
<p class="whitespace-pre-wrap break-words">Optionally, you can provide a custom PHPUnit configuration:</p>
</div>
<div>
<pre class="language-bash"><code>sail dusk --configuration phpunit.dusk.xml</code></pre>
</div>
<div>
<div class="relative flex flex-col rounded-lg">
<div class="pointer-events-none sticky my-0.5 ml-0.5 flex items-center justify-end px-1.5 py-1 mix-blend-luminosity top-0">
<div class="from-bg-300/90 to-bg-300/70 pointer-events-auto rounded-md bg-gradient-to-b p-0.5 backdrop-blur-md">Â </div>
</div>
</div>
</div>
            ]]>
        </content>
    </entry>
</feed>
