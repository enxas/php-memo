<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>PHPMemo</title>
    <link href="https://phpmemo.com/feed.xml" rel="self" />
    <link href="https://phpmemo.com" />
    <updated>2024-12-08T17:05:37+02:00</updated>
    <author>
        <name>Enxas</name>
    </author>
    <id>https://phpmemo.com</id>

    <entry>
        <title>Most Popular Design Patterns</title>
        <author>
            <name>Enxas</name>
        </author>
        <link href="https://phpmemo.com/most-popular-design-patterns.html"/>
        <id>https://phpmemo.com/most-popular-design-patterns.html</id>
            <category term="PHP"/>
            <category term="Design Patterns"/>

        <updated>2024-12-08T16:42:42+02:00</updated>
            <summary>
                <![CDATA[
                    Throughout my experience, these design patterns have stood out to me. It's useful for creating loose coupling between components, and enabling a one-to-many dependency between&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div>
<p>Throughout my experience, these design patterns have stood out to me.</p>
<h2>Observer Pattern</h2>
</div>
<p>It's useful for creating loose coupling between components, and enabling a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically without them needing to constantly poll for changes.</p>
<pre class="language-php"><code>enum ProductEvent
{
	case Available;
	case Discounted;
}

interface ProductObserver
{
	function notify(Product $product, ProductEvent $event): void;
}

class Product
{
	/**
	 * @var ProductObserver[]
	 */
	private $observers = [];


	function changeAvailability()
	{
		// change availability

		$this-&gt;notify(ProductEvent::Available);
	}

	function setDiscount()
	{
		// set discount

		$this-&gt;notify(ProductEvent::Discounted);
	}

	// ----------- event code -----------

	function attach(ProductObserver $observer)
	{
		$this-&gt;observers[spl_object_hash($observer)] = $observer;
	}

	function detach(ProductObserver $observer)
	{
		unset($this-&gt;observers[spl_object_hash($observer)]);
	}

	function notify(ProductEvent $event)
	{
		foreach ($this-&gt;observers as $observer) {
			$observer-&gt;notify($this, $event);
		}
	}
}

class Emailer implements ProductObserver
{
	function notify(Product $product, ProductEvent $event): void
	{
		match ($event) {
			ProductEvent::Available =&gt; $this-&gt;sendProductAvailableEmail(),
			ProductEvent::Discounted =&gt; $this-&gt;sendProductDiscountedEmail(),
		};
	}

	function sendProductAvailableEmail()
	{
		echo 'Sending product available email' . PHP_EOL;
	}

	function sendProductDiscountedEmail()
	{
		echo 'Sending product discounted email' . PHP_EOL;
	}
}

class Logger implements ProductObserver
{
	function notify(Product $product, ProductEvent $event): void
	{
		echo 'Product updated: ' . $event-&gt;name  . PHP_EOL;
	}
}

$product = new Product;
$logger = new Logger;
$emailer = new Emailer;

$product-&gt;attach($logger);
$product-&gt;attach($emailer);

$product-&gt;changeAvailability();
$product-&gt;setDiscount();

$product-&gt;detach($emailer);

$product-&gt;changeAvailability();
$product-&gt;setDiscount();</code></pre>
<div>
<h2>Facade Pattern</h2>
<p>The Facade design pattern provides a simplified, unified interface to a complex subsystem, hiding intricate interactions and making the system easier to use and modify. It reduces complexity by offering a clean, high-level entry point that encapsulates the underlying implementation details, promoting loose coupling and easier switching of inner implementations.</p>
<pre class="language-php"><code>interface Logger
{
	public function log(string $text): void;
}

class FileLogger implements Logger
{
	public function log(string $text): void
	{
		// log to a file
	}
}

class DatabaseLogger implements Logger
{
	public function log(string $text): void
	{
		// log to a database
	}
}

class Log
{
	public static function info(string $logger, string $text): void
	{
		(new $logger)-&gt;log($text);
	}
}

Log::info(DatabaseLogger::class, 'hello');</code></pre>
<div>
<h2>Strategy Pattern</h2>
<div>
<div>A way to switch implementations (strategies) for objects that perform the same actions differently.</div>
<ul>
<li>When some action could be done in different ways, for example payment can be processed by different payment providers.</li>
<li>When passing a bunch of flags to a function as parameter to configure different behaviors just pass a different behavior (strategy).</li>
</ul>
<div>
<pre class="language-php"><code>interface PaymentStrategyInterface
{
	public function doPayment($amount): void;
}

class PaymentService
{
	public function __construct(private PaymentStrategyInterface $strategy) {}

	public function process(int $amount): void
	{
		$this-&gt;strategy-&gt;doPayment($amount);
	}
}

class CreditCardPaymentStrategy implements PaymentStrategyInterface
{
	public function doPayment($amount): void
	{
		// do credit card stuff
	}
}

class PaypalPaymentStrategy implements PaymentStrategyInterface
{
	public function doPayment($amount): void
	{
		// do paypal stuff
	}
}

$ccStrategy = new CreditCardPaymentStrategy();
$paypalStrategy = new PaypalPaymentStrategy();

// pass in whichever
$paymentService = new PaymentService($ccStrategy);

// OR you can create Context, which encapsulates currently selected strategy

class PaymentStrategyContext
{
	private PaymentStrategyInterface $strategy;

	public function __construct(string $paymentMethod)
	{
		$this-&gt;strategy = match ($paymentMethod) {
			'paypal' =&gt; new PaypalPaymentStrategy(),
			'credit_card' =&gt; new CreditCardPaymentStrategy(),
			default =&gt; throw new \InvalidArgumentException('Unknown payment method'),
		};
	}

	public function doPayment($amount)
	{
		return $this-&gt;strategy-&gt;doPayment($amount);
	}
}

$strategyService = new PaymentStrategyContext($request-&gt;payment_method);
$strategyService-&gt;doPayment($amount);</code></pre>
<div>
<h2>Builder Pattern</h2>
<p class="whitespace-pre-wrap break-words">The Builder pattern provides a flexible and readable way to construct complex objects step by step, separating the construction of a complex object from its representation. It allows you to create different variations of an object using the same construction process, which is particularly useful when an object has multiple optional parameters or configuration possibilities.</p>
<ul class="-mt-1 [li&gt;&amp;]:mt-2 list-disc space-y-2 pl-8">
<li class="whitespace-normal break-words">Creating objects with numerous constructor parameters</li>
<li class="whitespace-normal break-words">Implementing configurable object creation where the configuration may evolve</li>
<li class="whitespace-normal break-words">Providing a clean, fluent interface for object initialization</li>
<li class="whitespace-normal break-words">Ensuring consistent object creation across different configurations</li>
</ul>
<pre class="language-php"><code>class Book
{
	private $id;
	private $title;
	private $price;
	private $author;

	public function __construct(BookBuilder $builder)
	{
		$this-&gt;id = $builder-&gt;getId();
		$this-&gt;title = $builder-&gt;getTitle();
		$this-&gt;price = $builder-&gt;getPrice();
		$this-&gt;author = $builder-&gt;getAuthor();
	}
}

class BookBuilder
{
	private $id;
	private $title;
	private $price;
	private $author;

	public function setId($id): self
	{
		$this-&gt;id = $id;
		return $this;
	}

	public function setTitle($title): self
	{
		$this-&gt;title = $title;
		return $this;
	}

	public function setPrice($price): self
	{
		$this-&gt;price = $price;
		return $this;
	}

	public function setAuthor($author): self
	{
		$this-&gt;author = $author;
		return $this;
	}

	public function build()
	{
		if (empty($this-&gt;id) || empty($this-&gt;title) || empty($this-&gt;price)  || empty($this-&gt;author)) {
			throw new \Exception('Required fields missing');
		}

		return new Book($this);
	}
}

$productBuilder = new BookBuilder();
$product = $productBuilder
	-&gt;setId(101)
	-&gt;setTitle('Title')
	-&gt;setPrice(123.99)
	-&gt;setAuthor('author')
	-&gt;build();</code></pre>
<div>
<h2>Factory Pattern</h2>
<p>Uniform way to create objects in one step. Factory is about "what" type of object to create.</p>
<pre class="language-php"><code>interface Animal
{
	public function speak(): string;
}

class Dog implements Animal
{
	public function speak(): string
	{
		return 'Woof!';
	}
}

class Cat implements Animal
{
	public function speak(): string
	{
		return 'Meow!';
	}
}

class AnimalFactory
{
	public function createAnimal(string $type): Animal
	{
		return match ($type) {
			'dog' =&gt; new Dog(),
			'cat' =&gt; new Cat(),
			default =&gt; throw new \Exception('Unknown animal')
		};
	}
}

// Example usage
$factory = new AnimalFactory();
$dog = $factory-&gt;createAnimal('dog');
echo $dog-&gt;speak(); </code></pre>
<div>
<h2>Adapter Pattern</h2>
<p>The Adapter pattern allows incompatible interfaces to work together by creating a wrapper that converts the interface of one class into another interface that clients expect. It enables seamless integration between classes with different interfaces, allowing you to make existing classes work with others without modifying their source code. This pattern is particularly useful when migrating between libraries, integrating third-party components, or bridging legacy and modern systems.</p>
<pre class="language-php"><code>// target interface
interface BookInterface
{
	public function read();
}

// existing class with an incompatible interface
class EBook
{
	public function displayContent()
	{
		echo 'Displaying e-book content';
	}
}

class EBookAdapter implements BookInterface
{
	private $eBook;

	public function __construct(EBook $eBook)
	{
		$this-&gt;eBook = $eBook;
	}

	public function read()
	{
		$this-&gt;eBook-&gt;displayContent();
	}
}

class Library
{
	public function readBook(BookInterface $book)
	{
		$book-&gt;read();
	}
}

// Usage
$eBook = new EBook();
$eBookAdapter = new EBookAdapter($eBook);

$library = new Library();
$library-&gt;readBook($eBookAdapter);</code></pre>
<div>
<h2>Decorator Pattern</h2>
<p>The Decorator pattern dynamically adds behaviors to an object by wrapping it with additional functionality, allowing flexible and granular extension without inheritance. It enables runtime modification of individual objects' capabilities without affecting other instances of the same class.</p>
<pre class="language-php"><code>interface Pie
{
	public function makePie(): string;
	public function getPrice(): int;
}

class BasicPie implements Pie
{
	private const PRICE = 1;

	public function makePie(): string
	{
		return 'basic pie';
	}

	public function getPrice(): int
	{
		return self::PRICE;
	}
}

abstract class BasicPieDecorator implements Pie
{
	public function __construct(protected Pie $basicPie) {}

	abstract public function makePie(): string;
	abstract public function getPrice(): int;
}

class ApplePie extends BasicPieDecorator
{
	private const PRICE = 2;

	public function makePie(): string
	{
		return 'apple pie';
	}

	public function getPrice(): int
	{
		return $this-&gt;basicPie-&gt;getPrice() + self::PRICE;
	}
}

class PumpkinPie extends BasicPieDecorator
{
	private const PRICE = 3;

	public function makePie(): string
	{
		return 'pumpkin pie';
	}

	public function getPrice(): int
	{
		return $this-&gt;basicPie-&gt;getPrice() + self::PRICE;
	}
}

$basicPie = new BasicPie();
$basicPie-&gt;getPrice();

$applePie = new ApplePie($basicPie);
$applePie-&gt;getPrice();

$pumpkinPie = new PumpkinPie($basicPie);
$pumpkinPie-&gt;getPrice();</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Lesser Known Design Patterns</title>
        <author>
            <name>Enxas</name>
        </author>
        <link href="https://phpmemo.com/lesser-known-design-patterns.html"/>
        <id>https://phpmemo.com/lesser-known-design-patterns.html</id>
            <category term="PHP"/>
            <category term="Laravel"/>
            <category term="Design Patterns"/>

        <updated>2024-12-07T17:59:40+02:00</updated>
            <summary>
                <![CDATA[
                    There are numerous lesser-known patterns that can significantly enhance your system design. This blog post will delve into some of them. The Laravel Pipeline pattern&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>There are numerous lesser-known patterns that can significantly enhance your system design. This blog post will delve into some of them.</p>
<h2>Pipeline Pattern</h2>
<p>The Laravel Pipeline pattern allows for a sequence of tasks or processes to be passed through a series of filters or pipes, each with a single responsibility, enhancing flexibility, testability, and extensibility.</p>
<pre class="language-php"><code>interface PipeInterface
{
	public function handle($passable, Closure $next);
}

class VerifyUserAge implements PipeInterface
{
	public function handle($user, Closure $next)
	{
		// Skip this pipe if user is admin
		if ($user-&gt;isAdmin()) {
			return $next($user);
		}

		if ($user-&gt;age &lt; 18) {
			throw new \Exception("User is not old enough");
		}
		return $next($user);
	}
}

class ValidateUserEmail implements PipeInterface
{
	public function handle($user, Closure $next)
	{
		if (!filter_var($user-&gt;email, FILTER_VALIDATE_EMAIL)) {
			throw new \Exception("Invalid email format");
		}
		return $next($user);
	}
}

class NormalizeUserName implements PipeInterface
{
	public function handle($user, Closure $next)
	{
		$user-&gt;name = trim(ucwords(strtolower($user-&gt;name)));
		return $next($user);
	}
}

class ProcessByType implements PipeInterface
{
	public function __construct(private string $type) {}

	public function handle($data, Closure $next)
	{
		match ($this-&gt;type) {
			'premium' =&gt; $this-&gt;processPremiumUser($data),
			'standard' =&gt; $this-&gt;processStandardUser($data),
			default =&gt; null
		};

		return $next($data);
	}
}

// User registration pipeline
class UserRegistrationPipeline
{
	public function process($user)
	{
		$pipes = [
			VerifyUserAge::class,
			ValidateUserEmail::class,
			NormalizeUserName::class,
			new ProcessByType('premium'),
		];

		return app(\Illuminate\Pipeline\Pipeline::class)
			-&gt;send($user)
			-&gt;through($pipes)
			-&gt;thenReturn();
	}
}

// Usage example
class UserController
{
	protected $pipeline;

	public function __construct(UserRegistrationPipeline $pipeline)
	{
		$this-&gt;pipeline = $pipeline;
	}

	public function register(Request $request)
	{
		try {
			$user = $this-&gt;pipeline-&gt;process(new User($request-&gt;all()));
			// Save user if all pipes pass
			$user-&gt;save();
			return response()-&gt;json(['message' =&gt; 'User registered successfully']);
		} catch (\Exception $e) {
			return response()-&gt;json(['error' =&gt; $e-&gt;getMessage()], 400);
		}
	}
}</code></pre>
<h2>Tap pattern</h2>
<p>The <code>tap</code> function takes two arguments: the first is the value to be passed, and the second is a closure. This closure receives the value, performs some operations on it, and then returns it.</p>
<pre class="language-php"><code>// instead of doing this
$article = Article::findOrFail($id);
$article-&gt;incrementViews();
$article-&gt;doSomething();

return $article;


// we can keep related functionality to one block of code
return tap(Article::findOrFail($id), function (Article $article) {
	$article-&gt;incrementViews();
	$article-&gt;doSomething();
});</code></pre>
<p>The <code>update</code> method typically returns a boolean value. However, by using the <code>tap</code> function, the <code>update</code> method instead returns the User model that was tapped. This functionality of <code>tap</code> makes it simple to ensure any method on an object returns the object itself.</p>
<pre class="language-php"><code>return tap($user)-&gt;update(['email' =&gt; $email]);</code></pre>
<p><a href="https://medium.com/@tanmaymishu/the-anatomy-of-laravels-tap-function-ea239c9846ab" target="_blank" rel="noopener noreferrer">The anatomy of Laravel’s tap() function</a></p>
<h2><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit;">Cache Refresh Ahead Pattern</span></h2>
<p>This pattern ensures that the cache is updated before it expires, guaranteeing that users receive fresh data at all times. If the data is frequently accessed, it will always be cached.</p>
<pre class="language-php"><code>function cacheWithRefreshAhead(string $key, int $ttl, float $refreshAheadTime, \Closure $callback): mixed
{
	$cachedData = Cache::get($key);

	if ($cachedData) {
		$expiresAt = Cache::get("$key:expires_at");

		if ($expiresAt &amp;&amp; Carbon::now()-&gt;diffInMinutes($expiresAt) &lt;= $ttl * $refreshAheadTime) {
			// dispatch a Job to update cache:
			Cache::put($key, $callback(), $ttl);
			Cache::put("$key:expires_at", Carbon::now()-&gt;addMinutes($ttl), $ttl);
		}

		return $cachedData;
	}

	// Cache miss, so cache it
	$data = $callback();
	// dispatch a Job to update cache:
	Cache::put($key, $data, $ttl);
	Cache::put("$key:expires_at", Carbon::now()-&gt;addMinutes($ttl), $ttl);

	return $data;
}

// Usage example 
$data = cacheWithRefreshAhead('some-key', 30, 5, function () {
	// Retrieve fresh data
	return ['data' =&gt; 123];
});</code></pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Troubleshooting PHP JIT: A Definitive Guide to Enabling Performance Boost When Configuration Fails</title>
        <author>
            <name>Enxas</name>
        </author>
        <link href="https://phpmemo.com/troubleshooting-php-jit-a-definitive-guide-to-enabling-performance-boost-when-configuration-fails.html"/>
        <id>https://phpmemo.com/troubleshooting-php-jit-a-definitive-guide-to-enabling-performance-boost-when-configuration-fails.html</id>
            <category term="PHP"/>
            <category term="Laravel"/>
            <category term="JIT"/>
            <category term="Docker"/>

        <updated>2024-11-30T18:18:37+02:00</updated>
            <summary>
                <![CDATA[
                    Many posts online suggest that enabling PHP JIT is as simple as adding some values to the php.ini file, but that's not exactly the case.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Many posts online suggest that enabling PHP JIT is as simple as adding some values to the <strong>php.ini</strong> file, but that's not exactly the case. Sometimes adding these configuration values doesn't seem to do anything. In this post, I'll show how to enable PHP JIT when nothing seems to work. I'll use a default Laravel Sail Docker container, but the idea is the same for any server running PHP.</p>
<p>1. Check if a PHP extension is blocking JIT from loading. Type this command in the terminal to see JIT status:</p>
<pre class="language-bash"><code>./vendor/bin/sail php -r "print_r(opcache_get_status(false)['jit']);"</code></pre>
<p class="whitespace-pre-wrap break-words">If you see this warning, then a PHP extension is blocking JIT:</p>
<blockquote>
<p>PHP Warning: JIT is incompatible with third-party extensions that override zend_execute_ex(). JIT disabled. in Unknown on line 0.</p>
</blockquote>
<p>2. Disable problematic extensions. Laravel Sail Docker file installs many extensions, so we need to identify which ones are not compatible with PHP JIT. After disabling extensions one by one, I found that <strong>php8.3-pcov</strong> and <strong>php8.3-xdebug</strong> are problematic.</p>
<p class="whitespace-pre-wrap break-words">To disable these extensions:</p>
<ul class="-mt-1 [li&gt;&amp;]:mt-2 list-disc space-y-2 pl-8">
<li class="whitespace-normal break-words">Ensure your .env file doesn't have <strong>SAIL_XDEBUG_MODE</strong> or any other environmental values that enable xDebug</li>
<li class="whitespace-normal break-words">Add these values to your php.ini:</li>
</ul>
<pre class="language-bash"><code>pcov.enabled=0
xdebug.mode=off</code></pre>
<p>Also, add these values to enable JIT:</p>
<pre class="language-bash"><code>[opcache]
zend_extension=opcache.so
opcache.enable=1
opcache.enable_cli=1
opcache.memory_consumption=128M
opcache.interned_strings_buffer=8
opcache.max_accelerated_files=4000
opcache.revalidate_freq=60
opcache.fast_shutdown=1
opcache.jit_buffer_size=100M
opcache.jit=tracing</code></pre>
<p>3. <span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Restart If you're using Laravel Sail, rebuild your image with:</span></p>
<ul class="-mt-1 [li&gt;&amp;]:mt-2 list-disc space-y-2 pl-8">
<li class="whitespace-normal break-words"><code class="bg-text-200/5 border border-0.5 border-border-300 text-danger-000 whitespace-pre-wrap rounded-[0.3rem] px-1 py-px text-[0.9rem]">sail down</code></li>
<li class="whitespace-normal break-words"><code class="bg-text-200/5 border border-0.5 border-border-300 text-danger-000 whitespace-pre-wrap rounded-[0.3rem] px-1 py-px text-[0.9rem]">sail build</code></li>
<li class="whitespace-normal break-words"><code class="bg-text-200/5 border border-0.5 border-border-300 text-danger-000 whitespace-pre-wrap rounded-[0.3rem] px-1 py-px text-[0.9rem]">sail up -d</code></li>
</ul>
<p class="whitespace-pre-wrap break-words">Execute the command again to verify if JIT is properly enabled:</p>
<pre class="language-bash"><code>./vendor/bin/sail php -r "print_r(opcache_get_status(false)['jit']);"</code></pre>
<p>And that's it. Hopefully, your PHP JIT is now enabled and working.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Setting up Laravel Dusk for Laravel Sail Project with Decoupled Vue Frontend on Windows</title>
        <author>
            <name>Enxas</name>
        </author>
        <link href="https://phpmemo.com/setting-up-laravel-dusk-for-laravel-sail-project-with-decoupled-vue-frontend-on-windows-2.html"/>
        <id>https://phpmemo.com/setting-up-laravel-dusk-for-laravel-sail-project-with-decoupled-vue-frontend-on-windows-2.html</id>
            <category term="WSL"/>
            <category term="Vue"/>
            <category term="Testing"/>
            <category term="Laravel"/>
            <category term="Dusk"/>
            <category term="Docker"/>

        <updated>2024-11-17T14:06:12+02:00</updated>
            <summary>
                <![CDATA[
                    Requirements Laravel Sail project Vue project with Vite WSL Installation Steps 1. In your docker-compose.yml file, add these ports to the "selenium" section: ports: -&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div>
<h2 class="font-600 text-xl font-bold">Requirements</h2>
<ul class="-mt-1 [li&gt;&amp;]:mt-2 list-disc space-y-2 pl-8">
<li class="whitespace-normal break-words">Laravel Sail project</li>
<li class="whitespace-normal break-words">Vue project with Vite</li>
<li class="whitespace-normal break-words">WSL</li>
</ul>
</div>
<div>
<h2 class="font-600 text-xl font-bold">Installation Steps<br><br></h2>
1. In your <code class="bg-text-200/5 border border-0.5 border-border-300 text-danger-000 whitespace-pre-wrap rounded-[0.3rem] px-1 py-px text-[0.9rem]">docker-compose.yml</code> file, add these ports to the "selenium" section:</div>
<div>
<pre class="language-yaml"><code>ports:
    - '${FORWARD_SELENIUM_PORT:-4444}:4444'
    - '${FORWARD_SELENIUM_HEADFUL_PORT:-7900}:7900'</code></pre>
</div>
<div>2. Install Dusk:</div>
<div>
<pre class="language-bash"><code>sail composer require --dev laravel/dusk</code></pre>
<p>3. Create Dusk test and update configuration:</p>
<pre class="language-bash"><code>sail artisan dusk:install</code></pre>
<p> 4. Create a test:</p>
<pre class="language-bash"><code>sail artisan dusk:make LoginTest</code></pre>
<p> 5. Add this test method to verify functionality:</p>
<pre class="language-php"><code>public function testLogin(): void
{
    $this-&gt;browse(function (Browser $browser) {
        $browser-&gt;visit('/')
            -&gt;type('name', 'Josh')
            -&gt;type('email', 'josh@example.com')
            -&gt;type('password', 'hunter2')
            -&gt;press('Login')
            -&gt;waitForText('Logged In');
    });
}</code></pre>
<h2 class="font-600 text-xl font-bold">Configuration<br><br></h2>
<p>Before running tests, ensure your Vue application running on Windows is accessible from within the Laravel Sail Docker container.<br><br></p>
</div>
<div>1. Host your Vue application with:
<pre class="language-bash"><code>npm run dev -- --host</code></pre>
<p> 2. Create <code class="bg-text-200/5 border border-0.5 border-border-300 text-danger-000 whitespace-pre-wrap rounded-[0.3rem] px-1 py-px text-[0.9rem]">.env.dusk</code> file in your Laravel application root with these values:</p>
<pre class="language-bash"><code>APP_URL=http://192.168.0.100:5174/
DB_DATABASE=test_db
LARAVEL_SAIL=1</code></pre>
<p> (Replace IP address with your hosted Vue application IP address).</p>
</div>
<div>
<h2 class="font-600 text-xl font-bold">Running Tests<br><br></h2>
<p class="whitespace-pre-wrap break-words">Basic test execution:</p>
</div>
<div>
<pre class="language-bash"><code>sail dusk --env=.env.dusk</code></pre>
</div>
<div>
<p>To view tests running visually:<br><br></p>
1. Add to <code class="bg-text-200/5 border border-0.5 border-border-300 text-danger-000 whitespace-pre-wrap rounded-[0.3rem] px-1 py-px text-[0.9rem]">.env.dusk</code>:</div>
<div>
<pre class="language-bash"><code>DUSK_HEADLESS_DISABLED=1</code></pre>
</div>
<div>2. Visit <code class="bg-text-200/5 border border-0.5 border-border-300 text-danger-000 whitespace-pre-wrap rounded-[0.3rem] px-1 py-px text-[0.9rem]">http://localhost:7900</code> (default password: 'secret')<br>
<p class="whitespace-pre-wrap break-words">Optionally, you can provide a custom PHPUnit configuration:</p>
</div>
<div>
<pre class="language-bash"><code>sail dusk --configuration phpunit.dusk.xml</code></pre>
</div>
<div>
<div class="relative flex flex-col rounded-lg">
<div class="pointer-events-none sticky my-0.5 ml-0.5 flex items-center justify-end px-1.5 py-1 mix-blend-luminosity top-0">
<div class="from-bg-300/90 to-bg-300/70 pointer-events-auto rounded-md bg-gradient-to-b p-0.5 backdrop-blur-md"> </div>
</div>
</div>
</div>
            ]]>
        </content>
    </entry>
</feed>
